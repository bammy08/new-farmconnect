// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Discount {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  code       String
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String    @unique
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  stock       Int
  price       Float
  discount    Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.ObjectId
  description String?
  slug        String   @unique
  imageUrl    String[]
  location    String
  city        String
  priceRange  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @db.ObjectId
}

enum UserRole {
  ADMIN
  USER
  FARMER
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?        @unique
  password          String
  emailVerified     Boolean        @default(false)
  products          Product[]
  role              UserRole       @default(USER)
  verificationToken String?
  farmerProfile     FarmerProfile?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model FarmerProfile {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  profileImageUrl String?
  email           String
  name            String
  phone           String
  shop            String
  location        String
  city            String
  products        String[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String    @unique @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}
